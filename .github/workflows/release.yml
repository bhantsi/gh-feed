name: Release

on:
  push:
    branches: [ main ]
    paths:
      - 'pyproject.toml'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version-check.outputs.changed }}
      new_version: ${{ steps.version-check.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Check if version changed
      id: version-check
      run: |
        # Get current version from pyproject.toml
        CURRENT_VERSION=$(grep -E '^version = "' pyproject.toml | cut -d'"' -f2)
        echo "Current version: $CURRENT_VERSION"
        
        # Check if version changed in last commit
        if git diff HEAD~1 HEAD -- pyproject.toml | grep -q "^+version = "; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

  create-release:
    needs: check-version
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.version_changed == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version
      id: get-version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          # For manual dispatch, we need to bump the version
          CURRENT_VERSION=$(grep -E '^version = "' pyproject.toml | cut -d'"' -f2)
          echo "Current version: $CURRENT_VERSION"
          
          # Parse version parts
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          case "${{ github.event.inputs.version_type }}" in
            "major")
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            "minor")
              NEW_VERSION="$major.$((minor + 1)).0"
              ;;
            "patch")
              NEW_VERSION="$major.$minor.$((patch + 1))"
              ;;
          esac
          
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        else
          # For automatic trigger, use the version from the commit
          echo "version=${{ needs.check-version.outputs.new_version }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Update version in pyproject.toml (if manual)
      if: github.event_name == 'workflow_dispatch'
      run: |
        sed -i 's/^version = ".*"/version = "${{ steps.get-version.outputs.version }}"/' pyproject.toml
    
    - name: Generate changelog
      id: changelog
      run: |
        VERSION=${{ steps.get-version.outputs.version }}
        
        # Create a basic changelog entry
        cat > TEMP_CHANGELOG.md << EOF
        ## What's Changed in v$VERSION
        
        ### 🚀 New Features
        - Version bump to $VERSION
        
        ### 🐛 Bug Fixes
        - Various improvements and bug fixes
        
        ### 📚 Documentation
        - Updated documentation
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.check-version.outputs.new_version }}...v$VERSION
        EOF
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat TEMP_CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Commit version bump (if manual)
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml
        git commit -m "Bump version to ${{ steps.get-version.outputs.version }}"
        git push
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get-version.outputs.version }}
        release_name: Release v${{ steps.get-version.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
