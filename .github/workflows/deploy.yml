name: Deploy to PyPI

on:
  push:
    branches: [ main ]  # Deploy on pushes to main branch
    tags:
      - 'v*'  # Trigger on version tags like v0.1.4, v1.0.0, etc.
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -e .
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=gh_feed --cov-report=xml || true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Publish to Test PyPI
      if: github.event_name == 'workflow_dispatch'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        if [ -z "$TWINE_PASSWORD" ]; then
          echo "‚ùå TEST_PYPI_API_TOKEN secret is not set!"
          echo "Please add the TEST_PYPI_API_TOKEN secret to your repository."
          exit 1
        fi
        twine upload --repository testpypi dist/*
    
    - name: Publish to PyPI
      if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || github.event_name == 'release'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        if [ -z "$TWINE_PASSWORD" ]; then
          echo "‚ùå PYPI_API_TOKEN secret is not set!"
          echo "Please add the PYPI_API_TOKEN secret to your repository."
          exit 1
        fi
        twine upload dist/*
    
    - name: Check if version exists on PyPI
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        VERSION=$(python -c "
import re
with open('pyproject.toml', 'r') as f:
    content = f.read()
    match = re.search(r'version = \"([^\"]+)\"', content)
    if match:
        print(match.group(1))
")
        echo "Current version: $VERSION"
        
        # Check if version already exists on PyPI
        if pip install gh-feed==$VERSION --dry-run 2>/dev/null; then
          echo "‚ùå Version $VERSION already exists on PyPI!"
          echo "üí° To deploy a new version:"
          echo "1. Run: python scripts/bump_version.py [patch|minor|major]"
          echo "2. Push the created tag: git push origin v\$VERSION"
          echo "3. This will trigger deployment with the new version"
          exit 1
        else
          echo "‚úÖ Version $VERSION does not exist on PyPI, proceeding with deployment"
        fi
    
    - name: Publish to PyPI (from main branch)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        if [ -z "$TWINE_PASSWORD" ]; then
          echo "‚ùå PYPI_API_TOKEN secret is not set!"
          echo "Please add the PYPI_API_TOKEN secret to your repository."
          exit 1
        fi
        echo "üöÄ Deploying to PyPI from main branch..."
        twine upload dist/*
